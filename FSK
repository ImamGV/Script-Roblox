local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/x2zu/OPEN-SOURCE-UI-ROBLOX/refs/heads/main/X2ZU%20UI%20ROBLOX%20OPEN%20SOURCE/DummyUi-leak-by-x2zu/fetching-main/Tools/Framework.luau"))()
local LibESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImamGV/Script/main/ESP"))()

local Window = Library:Window({
    Title = "Forsaken",
    Desc = "Forsaken on top",
    Icon = 95073582077930,
    Theme = "Dark",
    Config = {
        Keybind = Enum.KeyCode.LeftControl,
        Size = UDim2.new(0, 500, 0, 420)
    },
    CloseUIButton = {
        Enabled = true,
        Text = "\nToggle UI\n"
    }
})
local SidebarLine = Instance.new("Frame")
SidebarLine.Size = UDim2.new(0, 1, 1, 0)
SidebarLine.Position = UDim2.new(0, 140, 0, 0)
SidebarLine.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SidebarLine.BorderSizePixel = 0
SidebarLine.ZIndex = 5
SidebarLine.Name = "SidebarLine"
SidebarLine.Parent = game:GetService("CoreGui")

local Tab = {
Main = Window:Tab({Title = "Main", Icon = "book"}),
Players = Window:Tab({Title = "Players", Icon = "user"}),
Exploits = Window:Tab({Title = "Exploits", Icon = "star"}),
Visual = Window:Tab({Title = "Visual", Icon = "eye"})
}
--// Main Tab \\
local function AutoGenerator(v)
AutoGen = v
local debounce = {}
while AutoGen do
task.wait()
for _, v in pairs(game.Workspace.Map.Ingame.Map:GetChildren()) do
if v.Name == "Generator" then
if not debounce[v] and v.Progress.Value ~= 100 then
debounce[v] = true
v:WaitForChild("Remotes"):WaitForChild("RE"):FireServer()
task.delay(_G.AutoGeneratorDelay or 1.5, function() debounce[v] = nil end)
end
end
end
end
end
            
Tab.Main:Section({Title = "Generator"})
Tab.Main:Slider({
Title = "Fix Delay",
Min = 1.5,
Max = 12,
Rounding = 1,
Value = 1.5,
Callback = function(v)
_G.AutoGeneratorDelay = v
end})
Tab.Main:Toggle({
Title = "Auto Fix Generator",
Value = false,
Callback = function(v)
AutoGenerator(v)
end})
Tab.Main:Section({Title = "Misc"})
Tab.Main:Toggle({
Title = "Auto Pizza",
Value = false,
Callback = function(v)
_G.AutoPizza = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoPizza and game.Players.LocalPlayer.Character.Humanoid.Health < 80 then
workspace:FindFirstChild("Map"):FindFirstChild("Ingame"):FindFirstChild("Pizza").Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
end
end)
end})
Tab.Main:Toggle({
Title = "Auto Coins Flip",
Value = false,
Callback = function(v)
_G.AutoFlipCoins = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoFlipCoins then
game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer("UseActorAbility", "CoinFlip")
end
end)
end})
Tab.Main:Toggle({
Title = "Hide Bar",
Value = false,
Callback = function(v)
_G.HideBar = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.HideBar then
game.Players.LocalPlayer.PlayerGui.TemporaryUI.PlayerInfo.CurrentSurvivors.Visible = false
game.Players.LocalPlayer.PlayerGui.TemporaryUI.PlayerInfo.PlayerIcon.Image = "rbxassetid://12549056837"
else
game.Players.LocalPlayer.PlayerGui.TemporaryUI.PlayerInfo.CurrentSurvivors.Visible = true
end
end)
end})
Tab.Main:Section({Title = "Gameplay"})
Tab.Main:Toggle({
Title = "Auto Play (Test)",
Value = false,
Callback = function(v)
_G.AutoPlay = v
local PFS = game:GetService("PathfindingService")
local VIM = game:GetService("VirtualInputManager")

local testPath = PFS:CreatePath({
    AgentRadius = 2,
    AgentHeight = 5,
    AgentCanJump = false,
    AgentJumpHeight = 10,
    AgentCanClimb = true,
    AgentMaxSlope = 45
})

local isInGame, currentCharacter, humanoid, waypoints, counter, gencompleted, s, f, stopbreakingplease, isSprinting, stamina, busy, reached, start_time, fail_attempt
local Spectators = {}
fail_attempt = 0
-- In-game check
task.spawn(function()
while _G.AutoPlay do
    Spectators = {}
    print("     <- All")
    for i, child in game.Workspace.Players.Spectating:GetChildren() do
        print("[In-game Check] - A loop just being ran")
        print("      -> ".. child.Name)
        table.insert(Spectators, child.Name)
    end
    if table.find(Spectators, game.Players.LocalPlayer.Name) then
        isInGame = false
        print("    - Not in game")
        wait(1)
    else
        print("    + Is in game")
        isInGame = true
        wait()
    end
end
end)
-- RunHelper - v1.1 - Rewrite by chatgpt - More readable :sob:
task.spawn(function()
isSprinting = false
while _G.AutoPlay do
    if isInGame then
    local success, err = pcall(function()
        currentCharacter.Humanoid:SetAttribute("BaseSpeed", 14)
        local barText = game.Players.LocalPlayer.PlayerGui.TemporaryUI.PlayerInfo.Bars.Stamina.Amount.Text
        stamina = tonumber(string.split(barText, "/")[1])
        print("â¡ Stamina read:", stamina)

        local isSprintingFOV = currentCharacter.FOVMultipliers.Sprinting.Value == 1.125
        print("đŸƒâ€â™‚ï¸ Is currently sprinting (FOV check):", isSprintingFOV)

        if not isSprintingFOV then
            print("đŸ” Not sprinting, evaluating sprint conditions...")
            
            if stamina >= 70 then
                print("âœ… Stamina sufficient (", stamina, ") â€” attempting to sprint...")
            else
                print("đŸ›‘ Conditions not met for sprinting. Stamina:", stamina, " | Busy:", tostring(busy))
                wait(0.1)
                return
            end
            if busy then
                print("busy")
                return
            end

            print("âŒ¨ï¸ Sending LeftShift key event to initiate sprint.")
            VIM:SendKeyEvent(true, Enum.KeyCode.LeftShift, false, game)
        else
            print("âœ”ï¸ Already sprinting â€” no action taken.")
        end
    end)

    if not success then
        warn("âŒ Error occurred during loop:", err)
    end
    end
    wait()
end
end)

--Hopping Handler
-- Main loop
while _G.AutoPlay do
if isInGame then
    for _, surv in ipairs(game.Workspace.Players.Survivors:GetChildren()) do
        if surv:GetAttribute("Username") == game.Players.LocalPlayer.Name then
            currentCharacter = surv
            print("    -> currentCharacter set to", surv.Name)
        end
    end
    -- Death handler
    task.spawn(function()
        while true do
            if currentCharacter and currentCharacter:FindFirstChild("Humanoid") then
                if currentCharacter.Humanoid.Health <= 0 then
                    print("đŸ’€ You died.")
                    isInGame = false
                    isSprinting = false
                    busy = false
                    break
                end
            end
        wait()
        end
    end)

    for _, completedgen in ipairs(game.ReplicatedStorage.ObjectiveStorage:GetChildren()) do
        if not isInGame then
            warn("???")
            break
        end
        local required = completedgen:GetAttribute("RequiredProgress")
        if completedgen.Value == required then
            print("âœ… Completed all gens, proceed to RUN!")

            while #game.Workspace.Players:WaitForChild("Killers"):GetChildren() >= 1 do
                --test--
                if #game.Workspace.Players.Killers:GetChildren() == 0 then
                        isInGame = false
                        break
                    end
                s, f = pcall(function()
                    for _, killer in ipairs(game.Workspace.Players.Killers:GetDescendants()) do
                      if killer.Parent.Name == "Killers" and v:IsA("Model") then
                        local dist = (killer.HumanoidRootPart.Position - currentCharacter.HumanoidRootPart.Position).Magnitude
                        if dist <= 100 then
                            print("â ï¸ Killer nearby! Running...")

                            testPath:ComputeAsync(currentCharacter.HumanoidRootPart.Position, currentCharacter.HumanoidRootPart.Position + (-killer.HumanoidRootPart.CFrame.LookVector).Unit * 50)
                            waypoints = testPath:GetWaypoints()
                            humanoid = currentCharacter:WaitForChild("Humanoid")

                            print("đŸ“ Got", #waypoints, "waypoints. Moving...")
                            
                            local conn
                            for idx, wp in ipairs(waypoints) do
                                if stopbreakingplease then
                                    humanoid:MoveTo(currentCharacter.HumanoidRootPart.Position)
                                    break
                                end

                                reached = false
                                start_time = os.clock()
                                conn = humanoid.MoveToFinished:Connect(function(s)
                                    reached = s
                                    print("    Reached waypoint", idx)
                                    conn:Disconnect()
                                end)

                                humanoid:MoveTo(wp.Position)
                                repeat wait() until reached or (os.clock() - start_time) >= 10
                                if not reached then
                                    testPath:ComputeAsync(currentCharacter.HumanoidRootPart.Position, goalPos)
                                    waypoints = testPath:GetWaypoints()
                                    warn(("đŸ“ Waypoint %d timed out after 10 secs â€” gen another path"):format(idx))
                                    fail_attempt = fail_attempt + 1
                                    warn(fail_attempt)
                                    if counter >= 5 then
                                        warn("Fail, break")
                                        fail_attempt = 0
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end)
                wait()
            end
            print(s)
            print(f)

        else
            -- Try to repair a generator
            for _, gen in ipairs(game.Workspace.Map.Ingame:WaitForChild("Map"):GetChildren()) do
                if gen.Name == "Generator" and gen.Progress.Value ~= 100 then
                    print("đŸ”§ Generator found:", gen.Name, "progress =", gen.Progress.Value)
                    local goalPos = gen:WaitForChild("Positions").Right.Position
                    print("đŸ§­ Computing path to", goalPos)
                    testPath:ComputeAsync(currentCharacter.HumanoidRootPart.Position, goalPos)
                    print("      Path status =", testPath.Status)
                    
                    if testPath.Status == Enum.PathStatus.Success then
                        waypoints = testPath:GetWaypoints()
                        humanoid = currentCharacter:WaitForChild("Humanoid")

                        print("đŸ¶ Moving along", #waypoints, "waypoints...")
                        for idx, wp in ipairs(waypoints) do
                            if stopbreakingplease then
                                humanoid:MoveTo(currentCharacter.HumanoidRootPart.Position)
                                break
                            end
                            humanoid:MoveTo(wp.Position)
                            reached = false
                            start_time = os.clock()
                            conn = humanoid.MoveToFinished:Connect(function(s)
                                reached = s
                                print("    Reached waypoint", idx)
                                conn:Disconnect()
                            end)
                            humanoid:MoveTo(wp.Position)
                            repeat wait(0.01) until reached or (os.clock() - start_time) >= 10
                            if not reached then
                                warn(("đŸ“ Waypoint %d timed out after 10 secs â€” gen another path"):format(idx))
                                fail_attempt = fail_attempt + 1
                                warn(fail_attempt)
                                if fail_attempt >= 5 then
                                    warn("fail")
                                    fail_attempt = 0
                                    break
                                end
                                testPath:ComputeAsync(currentCharacter.HumanoidRootPart.Position, goalPos)
                                waypoints = testPath:GetWaypoints()
                            end
                        end

                        print("đŸ› ï¸ Interacting with generator prompt")
                        if not isInGame then
                            warn("???")
                            break
                        end
                        local thing = gen.Main.Prompt
                        if thing then
                            print("Yes!")
                        else
                            print("This gen somehow got no prompt, switchedd")
                            break
                        end
                        thing.HoldDuration = 0
                        thing.RequiresLineOfSight = false
                        thing.MaxActivationDistance = 99999

                        game.Workspace.Camera.CFrame = CFrame.new(201.610779, 64.460968, 1307.98096, 0.99840349, -0.0556023642, 0.00994364079, -1.31681965e-09, 0.176041901, 0.984382629, -0.0564845055, -0.982811034, 0.17576085)
                        wait(0.1)
                        thing:InputHoldBegin()
                        thing:InputHoldEnd()
                        busy = true
                        counter = 0
                        while gen.Progress.Value ~= 100 do
                            thing:InputHoldBegin()
                            thing:InputHoldEnd()
                            gen.Remotes.RE:FireServer()
                            wait(1.5)
                            if counter >= 10 or not isInGame then
                                warn("??")
                                break
                            end
                        end
                        print("âœ… Generator fixed!")
                        busy = false
                        if not isInGame then
                            break
                        end
                    else
                        warn("âŒ Path failed with status", testPath.Status)
                    end
                end
            end
        end
    end
end
wait()
end
end})
--// Players Tab \\
Tab.Players:Section({Title = "Players"})
Tab.Players:Slider({
Title = "Speed Boost",
Min = 0,
Max = 6,
Rounding = 1,
Value = 0,
Callback = function(v)
_G.SpeedBoostValue = v
end})
Tab.Players:Toggle({
Title = "Apply Speed",
Value = false,
Callback = function(v)
_G.SpeedBoost = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.SpeedBoost then
game.Players.LocalPlayer.Character.SpeedMultipliers.Sprinting.Value = _G.SpeedBoostValue or 28
end
end)
end})
Tab.Players:Toggle({
Title = "Inf Stamina",
Value = false,
Callback = function(v)
_G.InfinityStamina = v
local StaminaScript = require(game.ReplicatedStorage.Systems.Character.Game.Sprinting)
InfStamina = game:GetService("RunService").RenderStepped:Connect(function()
if not _G.InfinityStamina then
InfStamina:Disconnect()
StaminaScript.StaminaLossDisabled = nil
return
end
StaminaScript.StaminaLossDisabled = function() 
end
end)
end})
--// Exploits Tab \\
Tab.Exploits:Section({Title = "Anti"})
Tab.Exploits:Toggle({
Title = "Anti-John Doe Trail",
Value = false,
Callback = function(v)
if v then
for _,v in ipairs(workspace.Players.Killers:GetDescendants()) do
if v.Name == "Trail" and v then
v.CanTouch = false
end
end
AntiJohnDoeTrail = workspace.Players.Killers.DescendantAdded:Connect(function(v)
if v.Name == "Trail" and v then
v.CanTouch = false
end
end)
else
AntiJohnDoeTrail:Disconnect()
for _,v in ipairs(workspace.Players:GetDescendants()) do
if v.Name == "Trail" then
v.CanTouch = true
end
end
end
end})
--// Visual Tab \\
Tab.Visual:Section({Title = "Camera"})
Tab.Visual:Slider({
Title = "Field Of View",
Min = 70,
Max = 120,
Rounding = 0,
Value = 70,
Callback = function(v)
_G.FieldOfViewValue = v
end})
Tab.Visual:Toggle({
Title = "Apply Field Of View",
Value = false,
Callback = function(v)
_G.FieldOfView = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.FieldOfView then
workspace.Camera.FieldOfView = _G.FieldOfViewValue
end
end)
end})
Tab.Visual:Toggle({
Title = "Always Look Killers",
Value = false,
Callback = function(v)
_G.AutoViewKiller = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoViewKiller and game.Workspace.Players:FindFirstChild("Killers"):FindFirstChildOfClass("Model") then
if not game.Players.LocalPlayer.Name ~= "c00lkidd" or not game.Players.LocalPlayer.Name ~= "Jason" or not game.Players.LocalPlayer.Name ~= "JohnDoe" or not game.Players.LocalPlayer.Name ~= "1x1x1x1" then
game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position, Vector3.new(game.Workspace.Players:FindFirstChild("Killers"):FindFirstChildOfClass("Model").HumanoidRootPart.Position.X, game.Workspace.Players:FindFirstChild("Killers"):FindFirstChildOfClass("Model").HumanoidRootPart.Position.Y, game.Workspace.Players:FindFirstChild("Killers"):FindFirstChildOfClass("Model").HumanoidRootPart.Position.Z))
end
end
end)
end})
Tab.Visual:Section({Title = "ESP"})
local function Cylinder(child, color, title)
local Adornment = Instance.new("CylinderHandleAdornment")
Adornment.Height = child.Size.Y * 2
Adornment.Radius = child.Size.X * 1.75
Adornment.CFrame = CFrame.new(0,0,0) * CFrame.Angles(math.rad(90), 0, 0)
Adornment.Color3 = color
Adornment.Transparency = 0.5
Adornment.AlwaysOnTop = true
Adornment.ZIndex = 10
Adornment.Adornee = child
Adornment.Name = title
Adornment.Parent = child
end
local function Box(child, color, title)
local Adornment = Instance.new("BoxHandleAdornment")
Adornment.Size = child.Size
Adornment.CFrame = CFrame.new(0,0,0) * CFrame.Angles(math.rad(90), 0, 0)
Adornment.Color3 = color
Adornment.Transparency = 0.75
Adornment.AlwaysOnTop = true
Adornment.ZIndex = 10
Adornment.Adornee = child
Adornment.Name = title
Adornment.Parent = child
end

Tab.Visual:Toggle({
Title = "Killers ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace.Players:GetDescendants()) do
if v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killer_ESP") then
Cylinder(v.HumanoidRootPart, Color3.new(1), "Killer_ESP")
end
end
KillersESP = workspace.Players.Killers.DescendantAdded:Connect(function(v)
wait(1)
if v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killer_ESP") then
Cylinder(v.HumanoidRootPart, Color3.new(1), "Killer_ESP")
end
end)
else
KillersESP:Disconnect()
LibESP:Delete("Killer_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Survivors ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace.Players:GetDescendants()) do
if v:IsA("Model") and v.Parent.Name == "Survivors" and not v:FindFirstChild("Survival_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(0, 255, 0), 14, "Survival_ESP")
end
end
SurvivalESP = workspace.Players.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Parent.Name == "Survivors" and not v:FindFirstChild("Survival_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(0, 255, 0), 14, "Survival_ESP")
end
end)
else
SurvivalESP:Disconnect()
LibESP:Delete("Survival_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Items ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "BloxyCola" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Bloxy Cola", Color3.fromRGB(255, 255, 100), 14, "Items_ESP")
elseif v:IsA("Model") and v.Name == "Medkit" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Medkit", Color3.fromRGB(255, 0, 0), 14, "Items_ESP")
end
end
ItemsESP = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "BloxyCola" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Bloxy Cola", Color3.fromRGB(255, 255, 100), 14, "Items_ESP")
elseif v:IsA("Model") and v.Name == "Medkit" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Medkit", Color3.fromRGB(255, 0, 0), 14, "Items_ESP")
end
end)
else
ItemsESP:Disconnect()
LibESP:Delete("Items_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Generator ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "Generator" and not v:FindFirstChild("Generator_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 220, 0), 14, "Generator_ESP")
end
end
GeneratorESP = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "Generator" and not v:FindFirstChild("Generator_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 220, 0), 14, "Generator_ESP")
end
end)
else
GeneratorESP:Disconnect()
LibESP:Delete("Generator_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Subspace Tripmine ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "SubspaceTripmine" and not v:FindFirstChild("SubspaceTripmine_ESP") then
Cylinder(v:FindFirstChildOfClass("Part"), Color3.new(1,0,1), "SubspaceTripmine_ESP")
end
end
SubspaceTripmineESP = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "SubspaceTripmine" and not v:FindFirstChild("SubspaceTripmine_ESP") then
Cylinder(v:FindFirstChildOfClass("Part"), Color3.new(1,0,1), "SubspaceTripmine_ESP")
end
end)
else
SubspaceTripmineESP:Disconnect()
LibESP:Delete("SubspaceTripmine_ESP")
end
end})
--[[
    -- Toggle
    Tab:Toggle({
        Title = "Enable Feature",
        Desc = "Toggle to enable or disable the feature",
        Value = false,
        Callback = function(v)
            print("Toggle:", v)
        end
    })

    -- Button
    Tab:Button({
        Title = "Run Action",
        Desc = "Click to perform something",
        Callback = function()
            print("Button clicked!")
            Window:Notify({
                Title = "Button",
                Desc = "Action performed successfully.",
                Time = 3
            })
        end
    })

    -- Textbox
    Tab:Textbox({
        Title = "Input Text",
        Desc = "Type something here",
        Placeholder = "Enter value",
        Value = "",
        ClearTextOnFocus = false,
        Callback = function(text)
            print("Textbox value:", text)
        end
    })

    -- Slider
    Tab:Slider({
        Title = "Set Speed",
        Min = 0,
        Max = 100,
        Rounding = 0,
        Value = 25,
        Callback = function(val)
            print("Slider:", val)
        end
    })

    -- Dropdown
    Tab:Dropdown({
        Title = "Choose Option",
        List = {"Option 1", "Option 2", "Option 3"},
        Value = "Option 1",
        Callback = function(choice)
            print("Selected:", choice)
        end
    })

    -- Code Display
    local CodeBlock = Tab:Code({
        Title = "Example Code",
        Code = "-- This is a code preview\nprint('Hello world')"
    })

    -- Simulate update
    task.delay(5, function()
        CodeBlock:SetCode("-- Updated!\nprint('New content loaded')")
    end)
end

-- Line Separator
Window:Line()

-- Another Tab Example
local Extra = Window:Tab({Title = "Extra", Icon = "tag"}) do
    Extra:Section({Title = "About"})
    Extra:Button({
        Title = "Show Message",
        Desc = "Display a popup",
        Callback = function()
            Window:Notify({
                Title = "Fluent UI",
                Desc = "Everything works fine!",
                Time = 3
            })
        end
    })
end
Window:Line()
local Extra = Window:Tab({Title = "Settings", Icon = "wrench"}) do
    Extra:Section({Title = "Config"})
    Extra:Button({
        Title = "Show Message",
        Desc = "Display a popup",
        Callback = function()
            Window:Notify({
                Title = "Fluent UI",
                Desc = "Everything works fine!",
                Time = 3
            })
        end
    })
end
-- Final Notification
Window:Notify({
    Title = "x2zu",
    Desc = "All components loaded successfully! Credits leak: @x2zu",
    Time = 4
})
]]
