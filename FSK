local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/x2zu/OPEN-SOURCE-UI-ROBLOX/refs/heads/main/X2ZU%20UI%20ROBLOX%20OPEN%20SOURCE/DummyUi-leak-by-x2zu/fetching-main/Tools/Framework.luau"))()
local LibESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImamGV/Script/main/ESP"))()

local Window = Library:Window({
    Title = "Forsaken",
    Desc = "v0.0.1",
    Icon = 95073582077930,
    Theme = "Amethyst",
    Config = {
        Keybind = Enum.KeyCode.LeftControl,
        Size = UDim2.new(0, 400, 0, 320)
    },
    CloseUIButton = {
        Enabled = true,
        Text = "\nToggle UI\n"
    }
})
local SidebarLine = Instance.new("Frame")
SidebarLine.Size = UDim2.new(0, 1, 1, 0)
SidebarLine.Position = UDim2.new(0, 140, 0, 0)
SidebarLine.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SidebarLine.BorderSizePixel = 0
SidebarLine.ZIndex = 5
SidebarLine.Name = "SidebarLine"
SidebarLine.Parent = game:GetService("CoreGui")

local Tab = {
Main = Window:Tab({Title = "Main", Icon = "book"}),
Players = Window:Tab({Title = "Players", Icon = "user"}),
Exploits = Window:Tab({Title = "Exploits", Icon = "star"}),
Visual = Window:Tab({Title = "Visual", Icon = "eye"})
}
--// Main Tab \\
local function AutoGenerator(v)
AutoGen = v
while AutoGen do
for _, v in ipairs(workspace.Map.Ingame.Map:GetChildren()) do
if v.Name == "Generator" then
if v.Parent.Name == "Map" and v.Parent then
v:WaitForChild("Remotes"):WaitForChild("RE"):FireServer()
end
end
end
wait(_G.AutoGeneratorDelay or 1.5)
end
end
Tab.Main:Section({Title = "Generator"})
Tab.Main:Slider({
Title = "Fix Delay",
Min = 1.5,
Max = 12,
Rounding = 1,
Value = 1.5,
Callback = function(v)
_G.AutoGeneratorDelay = v
end})
Tab.Main:Toggle({
Title = "Auto Fix Generator",
Value = false,
Callback = function(v)
AutoGenerator(v)
end})
Tab.Main:Section({Title = "Misc"})
Tab.Main:Toggle({
Title = "Auto Pizza",
Value = false,
Callback = function(v)
_G.AutoPizza = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoPizza and game.Players.LocalPlayer.Character.Humanoid.Health < game.Players.LocalPlayer.Character.Humanoid.MaxHealth - 15 then
workspace:FindFirstChild("Map"):FindFirstChild("Ingame"):FindFirstChild("Pizza").Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
end
end)
end})
Tab.Main:Toggle({
Title = "Auto Coins Flip",
Value = false,
Callback = function(v)
_G.AutoFlipCoins = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.AutoFlipCoins then
game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer("UseActorAbility", "CoinFlip")
end
end)
end})
Tab.Main:Toggle({
Title = "Hide Bar",
Value = false,
Callback = function(v)
_G.HideBar = v
if _G.HideBar then
game.Players.LocalPlayer.PlayerGui.TemporaryUI.PlayerInfo.CurrentSurvivors.Visible = false
game.Players.LocalPlayer.PlayerGui.TemporaryUI.PlayerInfo.PlayerIcon.Image = "rbxassetid://12549056837"
else
game.Players.LocalPlayer.PlayerGui.TemporaryUI.PlayerInfo.CurrentSurvivors.Visible = true
end
end})
--// Players Tab \\
Tab.Players:Section({Title = "Players"})
Tab.Players:Slider({
Title = "Speed Boost",
Min = 0.1,
Max = 5,
Rounding = 2,
Value = 0.1,
Callback = function(v)
_G.SpeedBoostValue = v
end})
Tab.Players:Toggle({
Title = "Apply Speed",
Value = false,
Callback = function(v)
_G.SpeedBoost = v
while true do
if _G.SpeedBoost then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame += game.Players.LocalPlayer.Character.Humanoid.MoveDirection * _G.SpeedBoostValue or 0.1
game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = true
end
wait()
end
end})
Tab.Players:Toggle({
Title = "Inf Stamina",
Value = false,
Callback = function(v)
_G.InfinityStamina = v
local StaminaScript = require(game.ReplicatedStorage.Systems.Character.Game.Sprinting)
InfStamina = game:GetService("RunService").RenderStepped:Connect(function()
if not _G.InfinityStamina then
InfStamina:Disconnect()
StaminaScript.StaminaLossDisabled = nil
return
end
StaminaScript.StaminaLossDisabled = function() 
end
end)
end})
--// Exploits Tab \\
Tab.Exploits:Section({Title = "Anti Ability John Doe"})
Tab.Exploits:Toggle({
Title = "Anti-Stomp Trap",
Value = false,
Callback = function(v)
if v then
for _,v in ipairs(workspace.Map.Ingame:GetDescendants()) do
if v.Name == "Shadow" and v then
v.CanTouch = false
end
end
AntiJohnDoeStompTrap = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v.Name == "Shadow" and v then
v.CanTouch = false
end
end)
else
AntiJohnDoeStompTrap:Disconnect()
for _,v in ipairs(workspace.Map.Ingame:GetDescendants()) do
if v.Name == "Shadow" and v then
v.CanTouch = true
end
end
end
end})
Tab.Exploits:Toggle({
Title = "Anti-Trail",
Value = false,
Callback = function(v)
if v then
for _,v in ipairs(workspace.Players.Killers:GetDescendants()) do
if v.Name == "Trail" and v then
v.CanTouch = false
end
end
AntiJohnDoeTrail = workspace.Players.Killers.DescendantAdded:Connect(function(v)
if v.Name == "Trail" and v then
v.CanTouch = false
end
end)
else
AntiJohnDoeTrail:Disconnect()
for _,v in ipairs(workspace.Players:GetDescendants()) do
if v.Name == "Trail" then
v.CanTouch = true
end
end
end
end})

--// Visual Tab \\
Tab.Visual:Section({Title = "Camera"})
Tab.Visual:Slider({
Title = "Field Of View",
Min = 70,
Max = 120,
Rounding = 0,
Value = 70,
Callback = function(v)
_G.FieldOfViewValue = v
end})
Tab.Visual:Toggle({
Title = "Apply Field Of View",
Value = false,
Callback = function(v)
_G.FieldOfView = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.FieldOfView then
workspace.Camera.FieldOfView = _G.FieldOfViewValue
end
end)
end})
Tab.Visual:Toggle({
Title = "No Fog",
Value = false,
Callback = function(v)
_G.NoFog = v
game:GetService("RunService").RenderStepped:Connect(function()
if not game.Lighting:GetAttribute("FogStart") then game.Lighting:SetAttribute("FogStart", game.Lighting.FogStart) end
if not game.Lighting:GetAttribute("FogEnd") then game.Lighting:SetAttribute("FogEnd", game.Lighting.FogEnd) end
game.Lighting.FogStart = _G.NoFog and 0 or game.Lighting:GetAttribute("FogStart")
game.Lighting.FogEnd = _G.NoFog and math.huge or game.Lighting:GetAttribute("FogEnd")
local fog = game.Lighting:FindFirstChildOfClass("Atmosphere")
if fog then
if not fog:GetAttribute("Density") then fog:SetAttribute("Density", fog.Density) end
fog.Density = _G.NoFog and 0 or fog:GetAttribute("Density")
end
end)
end})
Tab.Visual:Toggle({
Title = "Fullbright",
Value = false,
Callback = function(v)
_G.Fullbright = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.Fullbright then
game.Lighting.OutdoorAmbient = Color3.fromRGB(120,120,120)
game.Lighting.Brightness = 0
game.Lighting.GlobalShadows = false
else
game.Lighting.OutdoorAmbient = Color3.fromRGB(55,55,55)
game.Lighting.Brightness = 0
game.Lighting.GlobalShadows = true
end
end)
end})
Tab.Visual:Section({Title = "ESP"})
local function Cylinder(child, color, title)
local Adornment = Instance.new("CylinderHandleAdornment")
Adornment.Height = child.Size.Y * 2
Adornment.Radius = child.Size.X * 1.75
Adornment.CFrame = CFrame.new(0,0,0) * CFrame.Angles(math.rad(90), 0, 0)
Adornment.Color3 = color
Adornment.Transparency = 0.5
Adornment.AlwaysOnTop = true
Adornment.ZIndex = 10
Adornment.Adornee = child
Adornment.Name = title
Adornment.Parent = child
end
local function Box(child, color, title)
local Adornment = Instance.new("BoxHandleAdornment")
Adornment.Size = child.Size
Adornment.CFrame = CFrame.new(0,0,0) * CFrame.Angles(math.rad(90), 0, 0)
Adornment.Color3 = color
Adornment.Transparency = 0.75
Adornment.AlwaysOnTop = true
Adornment.ZIndex = 10
Adornment.Adornee = child
Adornment.Name = title
Adornment.Parent = child
end

Tab.Visual:Toggle({
Title = "Killers ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace.Players:GetDescendants()) do
if v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killer_ESP") then
Cylinder(v.HumanoidRootPart, Color3.new(1), "Killer_ESP")
end
end
KillersESP = workspace.Players.Killers.DescendantAdded:Connect(function(v)
wait(1)
if v:IsA("Model") and v.Parent.Name == "Killers" and not v:FindFirstChild("Killer_ESP") then
Cylinder(v.HumanoidRootPart, Color3.new(1), "Killer_ESP")
end
end)
else
KillersESP:Disconnect()
LibESP:Delete("Killer_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Survivors ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace.Players:GetDescendants()) do
if v:IsA("Model") and v.Parent.Name == "Survivors" and not v:FindFirstChild("Survival_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(0, 255, 0), 14, "Survival_ESP")
end
end
SurvivalESP = workspace.Players.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Parent.Name == "Survivors" and not v:FindFirstChild("Survival_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(0, 255, 0), 14, "Survival_ESP")
end
end)
else
SurvivalESP:Disconnect()
LibESP:Delete("Survival_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Trap ESP",
Value = false,
Callback = function(v)
if v then
for _,v in ipairs(workspace.Map.Ingame:GetDescendants()) do
if v.Name == "Shadow" and v then
Box(v, Color3.new(1), "Trap_ESP")
end
end
TrapESP = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v.Name == "Shadow" and v then
Box(v, Color3.new(1), "Trap_ESP")
end
end)
else
TrapESP:Disconnect()
end
end})
Tab.Visual:Toggle({
Title = "Items ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "BloxyCola" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Bloxy Cola", Color3.fromRGB(255, 255, 100), 14, "Items_ESP")
elseif v:IsA("Model") and v.Name == "Medkit" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Medkit", Color3.fromRGB(255, 0, 0), 14, "Items_ESP")
end
end
ItemsESP = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "BloxyCola" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Bloxy Cola", Color3.fromRGB(255, 255, 100), 14, "Items_ESP")
elseif v:IsA("Model") and v.Name == "Medkit" and not v:FindFirstChild("Items_ESP") then
LibESP:AddESP(v, "Medkit", Color3.fromRGB(255, 0, 0), 14, "Items_ESP")
end
end)
else
ItemsESP:Disconnect()
LibESP:Delete("Items_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Generator ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "Generator" and not v:FindFirstChild("Generator_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 220, 0), 14, "Generator_ESP")
end
end
GeneratorESP = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "Generator" and not v:FindFirstChild("Generator_ESP") then
LibESP:AddESP(v, "", Color3.fromRGB(255, 220, 0), 14, "Generator_ESP")
end
end)
else
GeneratorESP:Disconnect()
LibESP:Delete("Generator_ESP")
end
end})
Tab.Visual:Toggle({
Title = "Subspace Tripmine ESP",
Value = false,
Callback = function(v)
if v then
for _, v in ipairs(workspace:GetDescendants()) do
if v:IsA("Model") and v.Name == "SubspaceTripmine" and not v:FindFirstChild("SubspaceTripmine_ESP") then
Cylinder(v:FindFirstChildOfClass("Part"), Color3.new(1,0,1), "SubspaceTripmine_ESP")
end
end
SubspaceTripmineESP = workspace.Map.Ingame.DescendantAdded:Connect(function(v)
if v:IsA("Model") and v.Name == "SubspaceTripmine" and not v:FindFirstChild("SubspaceTripmine_ESP") then
Cylinder(v:FindFirstChildOfClass("Part"), Color3.new(1,0,1), "SubspaceTripmine_ESP")
end
end)
else
SubspaceTripmineESP:Disconnect()
LibESP:Delete("SubspaceTripmine_ESP")
end
end})
--[[
    -- Toggle
    Tab:Toggle({
        Title = "Enable Feature",
        Desc = "Toggle to enable or disable the feature",
        Value = false,
        Callback = function(v)
            print("Toggle:", v)
        end
    })

    -- Button
    Tab:Button({
        Title = "Run Action",
        Desc = "Click to perform something",
        Callback = function()
            print("Button clicked!")
            Window:Notify({
                Title = "Button",
                Desc = "Action performed successfully.",
                Time = 3
            })
        end
    })

    -- Textbox
    Tab:Textbox({
        Title = "Input Text",
        Desc = "Type something here",
        Placeholder = "Enter value",
        Value = "",
        ClearTextOnFocus = false,
        Callback = function(text)
            print("Textbox value:", text)
        end
    })

    -- Slider
    Tab:Slider({
        Title = "Set Speed",
        Min = 0,
        Max = 100,
        Rounding = 0,
        Value = 25,
        Callback = function(val)
            print("Slider:", val)
        end
    })

    -- Dropdown
    Tab:Dropdown({
        Title = "Choose Option",
        List = {"Option 1", "Option 2", "Option 3"},
        Value = "Option 1",
        Callback = function(choice)
            print("Selected:", choice)
        end
    })

    -- Code Display
    local CodeBlock = Tab:Code({
        Title = "Example Code",
        Code = "-- This is a code preview\nprint('Hello world')"
    })

    -- Simulate update
    task.delay(5, function()
        CodeBlock:SetCode("-- Updated!\nprint('New content loaded')")
    end)
end

-- Line Separator
Window:Line()

-- Another Tab Example
local Extra = Window:Tab({Title = "Extra", Icon = "tag"}) do
    Extra:Section({Title = "About"})
    Extra:Button({
        Title = "Show Message",
        Desc = "Display a popup",
        Callback = function()
            Window:Notify({
                Title = "Fluent UI",
                Desc = "Everything works fine!",
                Time = 3
            })
        end
    })
end
Window:Line()
local Extra = Window:Tab({Title = "Settings", Icon = "wrench"}) do
    Extra:Section({Title = "Config"})
    Extra:Button({
        Title = "Show Message",
        Desc = "Display a popup",
        Callback = function()
            Window:Notify({
                Title = "Fluent UI",
                Desc = "Everything works fine!",
                Time = 3
            })
        end
    })
end
-- Final Notification
Window:Notify({
    Title = "x2zu",
    Desc = "All components loaded successfully! Credits leak: @x2zu",
    Time = 4
})
]]
